
MicrofoneTeste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001210  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080012d0  080012d0  000112d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001300  08001300  00011300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001304  08001304  00011304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  20000004  0800130c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000070  0800130c  00020070  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008ed8  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001732  00000000  00000000  00028f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001821  00000000  00000000  0002a636  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003b0  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000508  00000000  00000000  0002c208  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000025b7  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000017af  00000000  00000000  0002ecc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030476  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008fc  00000000  00000000  000304f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080012b8 	.word	0x080012b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080012b8 	.word	0x080012b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 fe72 	bl	8000f0c <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 fade 	bl	80007f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 faa8 	bl	8000790 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f000 ff55 	bl	8001104 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000020 	.word	0x20000020

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000020 	.word	0x20000020

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000282:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000284:	f7ff fff6 	bl	8000274 <HAL_GetTick>
  uint32_t wait = Delay;
 8000288:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800028a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800028c:	1c63      	adds	r3, r4, #1
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	f7ff ffee 	bl	8000274 <HAL_GetTick>
 8000298:	1b40      	subs	r0, r0, r5
 800029a:	42a0      	cmp	r0, r4
 800029c:	d3fa      	bcc.n	8000294 <HAL_Delay+0x14>
  {
  }
}
 800029e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002a0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002a0:	2103      	movs	r1, #3
 80002a2:	6803      	ldr	r3, [r0, #0]
{
 80002a4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002a6:	689a      	ldr	r2, [r3, #8]
{
 80002a8:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002aa:	400a      	ands	r2, r1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	d001      	beq.n	80002b4 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002b0:	2000      	movs	r0, #0
}
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002b4:	6819      	ldr	r1, [r3, #0]
 80002b6:	4211      	tst	r1, r2
 80002b8:	d102      	bne.n	80002c0 <ADC_Disable+0x20>
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	0412      	lsls	r2, r2, #16
 80002be:	d5f7      	bpl.n	80002b0 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80002c0:	2205      	movs	r2, #5
 80002c2:	689d      	ldr	r5, [r3, #8]
 80002c4:	4015      	ands	r5, r2
 80002c6:	2d01      	cmp	r5, #1
 80002c8:	d11a      	bne.n	8000300 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 80002ca:	2202      	movs	r2, #2
 80002cc:	6899      	ldr	r1, [r3, #8]
 80002ce:	430a      	orrs	r2, r1
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	2203      	movs	r2, #3
 80002d4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80002d6:	f7ff ffcd 	bl	8000274 <HAL_GetTick>
 80002da:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002dc:	6823      	ldr	r3, [r4, #0]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	422b      	tst	r3, r5
 80002e2:	d0e5      	beq.n	80002b0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002e4:	f7ff ffc6 	bl	8000274 <HAL_GetTick>
 80002e8:	1b80      	subs	r0, r0, r6
 80002ea:	2802      	cmp	r0, #2
 80002ec:	d9f6      	bls.n	80002dc <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002ee:	2310      	movs	r3, #16
 80002f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80002f2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f4:	4313      	orrs	r3, r2
 80002f6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002fa:	431d      	orrs	r5, r3
 80002fc:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002fe:	e7d8      	b.n	80002b2 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000300:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000302:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000304:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000306:	4313      	orrs	r3, r2
 8000308:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800030a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800030c:	4303      	orrs	r3, r0
 800030e:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000310:	e7cf      	b.n	80002b2 <ADC_Disable+0x12>
	...

08000314 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000314:	2300      	movs	r3, #0
{
 8000316:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000318:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800031a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800031c:	6803      	ldr	r3, [r0, #0]
{
 800031e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	400a      	ands	r2, r1
 8000324:	2a01      	cmp	r2, #1
 8000326:	d107      	bne.n	8000338 <ADC_Enable+0x24>
 8000328:	6819      	ldr	r1, [r3, #0]
 800032a:	4211      	tst	r1, r2
 800032c:	d001      	beq.n	8000332 <ADC_Enable+0x1e>
  return HAL_OK;
 800032e:	2000      	movs	r0, #0
}
 8000330:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000332:	68da      	ldr	r2, [r3, #12]
 8000334:	0412      	lsls	r2, r2, #16
 8000336:	d4fa      	bmi.n	800032e <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000338:	6899      	ldr	r1, [r3, #8]
 800033a:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <ADC_Enable+0x8c>)
 800033c:	4211      	tst	r1, r2
 800033e:	d008      	beq.n	8000352 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000340:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000342:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000344:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000346:	4313      	orrs	r3, r2
 8000348:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800034c:	4303      	orrs	r3, r0
 800034e:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000350:	e7ee      	b.n	8000330 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000352:	2201      	movs	r2, #1
 8000354:	6899      	ldr	r1, [r3, #8]
 8000356:	430a      	orrs	r2, r1
 8000358:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <ADC_Enable+0x90>)
 800035c:	4912      	ldr	r1, [pc, #72]	; (80003a8 <ADC_Enable+0x94>)
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	f7ff fed2 	bl	8000108 <__udivsi3>
 8000364:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000366:	9b01      	ldr	r3, [sp, #4]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d115      	bne.n	8000398 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 800036c:	f7ff ff82 	bl	8000274 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000370:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000372:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000374:	6823      	ldr	r3, [r4, #0]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	422b      	tst	r3, r5
 800037a:	d1d8      	bne.n	800032e <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800037c:	f7ff ff7a 	bl	8000274 <HAL_GetTick>
 8000380:	1b80      	subs	r0, r0, r6
 8000382:	2802      	cmp	r0, #2
 8000384:	d9f6      	bls.n	8000374 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000386:	2310      	movs	r3, #16
 8000388:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800038a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800038c:	4313      	orrs	r3, r2
 800038e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000390:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000392:	432b      	orrs	r3, r5
 8000394:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000396:	e7cb      	b.n	8000330 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000398:	9b01      	ldr	r3, [sp, #4]
 800039a:	3b01      	subs	r3, #1
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	e7e2      	b.n	8000366 <ADC_Enable+0x52>
 80003a0:	80000017 	.word	0x80000017
 80003a4:	20000000 	.word	0x20000000
 80003a8:	000f4240 	.word	0x000f4240

080003ac <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80003ac:	2204      	movs	r2, #4
 80003ae:	6803      	ldr	r3, [r0, #0]
{
 80003b0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80003b2:	6899      	ldr	r1, [r3, #8]
{
 80003b4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80003b6:	4211      	tst	r1, r2
 80003b8:	d101      	bne.n	80003be <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80003ba:	2000      	movs	r0, #0
}
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003be:	6899      	ldr	r1, [r3, #8]
 80003c0:	4211      	tst	r1, r2
 80003c2:	d006      	beq.n	80003d2 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80003c4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003c6:	0792      	lsls	r2, r2, #30
 80003c8:	d403      	bmi.n	80003d2 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80003ca:	2210      	movs	r2, #16
 80003cc:	6899      	ldr	r1, [r3, #8]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80003d2:	f7ff ff4f 	bl	8000274 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80003d6:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80003d8:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80003da:	6823      	ldr	r3, [r4, #0]
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	422b      	tst	r3, r5
 80003e0:	d0eb      	beq.n	80003ba <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80003e2:	f7ff ff47 	bl	8000274 <HAL_GetTick>
 80003e6:	1b80      	subs	r0, r0, r6
 80003e8:	2802      	cmp	r0, #2
 80003ea:	d9f6      	bls.n	80003da <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ec:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ee:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003f2:	4313      	orrs	r3, r2
 80003f4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003f8:	4303      	orrs	r3, r0
 80003fa:	64a3      	str	r3, [r4, #72]	; 0x48
 80003fc:	e7de      	b.n	80003bc <ADC_ConversionStop+0x10>
	...

08000400 <HAL_ADC_Init>:
{
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000404:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000406:	2c00      	cmp	r4, #0
 8000408:	d072      	beq.n	80004f0 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800040a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800040c:	2b00      	cmp	r3, #0
 800040e:	d106      	bne.n	800041e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000410:	0022      	movs	r2, r4
 8000412:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000414:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8000416:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000418:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800041a:	f000 fe9b 	bl	8001154 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800041e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000420:	06db      	lsls	r3, r3, #27
 8000422:	d500      	bpl.n	8000426 <HAL_ADC_Init+0x26>
 8000424:	e079      	b.n	800051a <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000426:	2204      	movs	r2, #4
 8000428:	6823      	ldr	r3, [r4, #0]
 800042a:	6898      	ldr	r0, [r3, #8]
 800042c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800042e:	d000      	beq.n	8000432 <HAL_ADC_Init+0x32>
 8000430:	e073      	b.n	800051a <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8000432:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000434:	4942      	ldr	r1, [pc, #264]	; (8000540 <HAL_ADC_Init+0x140>)
 8000436:	4011      	ands	r1, r2
 8000438:	2202      	movs	r2, #2
 800043a:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 800043c:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800043e:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000440:	689a      	ldr	r2, [r3, #8]
 8000442:	400a      	ands	r2, r1
 8000444:	2a01      	cmp	r2, #1
 8000446:	d000      	beq.n	800044a <HAL_ADC_Init+0x4a>
 8000448:	e06d      	b.n	8000526 <HAL_ADC_Init+0x126>
 800044a:	6819      	ldr	r1, [r3, #0]
 800044c:	4211      	tst	r1, r2
 800044e:	d102      	bne.n	8000456 <HAL_ADC_Init+0x56>
 8000450:	68da      	ldr	r2, [r3, #12]
 8000452:	0412      	lsls	r2, r2, #16
 8000454:	d567      	bpl.n	8000526 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000456:	68da      	ldr	r2, [r3, #12]
 8000458:	493a      	ldr	r1, [pc, #232]	; (8000544 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800045a:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800045c:	400a      	ands	r2, r1
 800045e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000460:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000462:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000464:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000466:	69e2      	ldr	r2, [r4, #28]
 8000468:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800046a:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800046c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800046e:	3a01      	subs	r2, #1
 8000470:	1e56      	subs	r6, r2, #1
 8000472:	41b2      	sbcs	r2, r6
 8000474:	0316      	lsls	r6, r2, #12
 8000476:	68e2      	ldr	r2, [r4, #12]
 8000478:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800047a:	6922      	ldr	r2, [r4, #16]
 800047c:	430f      	orrs	r7, r1
 800047e:	2a02      	cmp	r2, #2
 8000480:	d100      	bne.n	8000484 <HAL_ADC_Init+0x84>
 8000482:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000484:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000486:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000488:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800048a:	433a      	orrs	r2, r7
 800048c:	4332      	orrs	r2, r6
 800048e:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000490:	2901      	cmp	r1, #1
 8000492:	d104      	bne.n	800049e <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000494:	2d00      	cmp	r5, #0
 8000496:	d12c      	bne.n	80004f2 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0249      	lsls	r1, r1, #9
 800049c:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800049e:	20c2      	movs	r0, #194	; 0xc2
 80004a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80004a2:	30ff      	adds	r0, #255	; 0xff
 80004a4:	4281      	cmp	r1, r0
 80004a6:	d002      	beq.n	80004ae <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80004a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004aa:	4301      	orrs	r1, r0
 80004ac:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004ae:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80004b0:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004b2:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80004b4:	4311      	orrs	r1, r2
 80004b6:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80004ba:	4281      	cmp	r1, r0
 80004bc:	d002      	beq.n	80004c4 <HAL_ADC_Init+0xc4>
 80004be:	1e48      	subs	r0, r1, #1
 80004c0:	2806      	cmp	r0, #6
 80004c2:	d807      	bhi.n	80004d4 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004c4:	2507      	movs	r5, #7
 80004c6:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004c8:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004ca:	43a8      	bics	r0, r5
 80004cc:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004ce:	6958      	ldr	r0, [r3, #20]
 80004d0:	4301      	orrs	r1, r0
 80004d2:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	491c      	ldr	r1, [pc, #112]	; (8000548 <HAL_ADC_Init+0x148>)
 80004d8:	400b      	ands	r3, r1
 80004da:	429a      	cmp	r2, r3
 80004dc:	d111      	bne.n	8000502 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80004de:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80004e0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80004e2:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80004e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004e6:	4393      	bics	r3, r2
 80004e8:	001a      	movs	r2, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	4313      	orrs	r3, r2
 80004ee:	6463      	str	r3, [r4, #68]	; 0x44
}
 80004f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004f2:	2020      	movs	r0, #32
 80004f4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80004f6:	4328      	orrs	r0, r5
 80004f8:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80004fc:	4301      	orrs	r1, r0
 80004fe:	64a1      	str	r1, [r4, #72]	; 0x48
 8000500:	e7cd      	b.n	800049e <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8000502:	2212      	movs	r2, #18
 8000504:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000506:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000508:	4393      	bics	r3, r2
 800050a:	001a      	movs	r2, r3
 800050c:	2310      	movs	r3, #16
 800050e:	4313      	orrs	r3, r2
 8000510:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000512:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000514:	4303      	orrs	r3, r0
 8000516:	64a3      	str	r3, [r4, #72]	; 0x48
 8000518:	e7ea      	b.n	80004f0 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800051a:	2310      	movs	r3, #16
 800051c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800051e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000520:	4313      	orrs	r3, r2
 8000522:	6463      	str	r3, [r4, #68]	; 0x44
 8000524:	e7e4      	b.n	80004f0 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000526:	2118      	movs	r1, #24
 8000528:	68da      	ldr	r2, [r3, #12]
 800052a:	438a      	bics	r2, r1
 800052c:	68a1      	ldr	r1, [r4, #8]
 800052e:	430a      	orrs	r2, r1
 8000530:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000532:	6919      	ldr	r1, [r3, #16]
 8000534:	6862      	ldr	r2, [r4, #4]
 8000536:	0089      	lsls	r1, r1, #2
 8000538:	0889      	lsrs	r1, r1, #2
 800053a:	4311      	orrs	r1, r2
 800053c:	6119      	str	r1, [r3, #16]
 800053e:	e78a      	b.n	8000456 <HAL_ADC_Init+0x56>
 8000540:	fffffefd 	.word	0xfffffefd
 8000544:	fffe0219 	.word	0xfffe0219
 8000548:	833fffe7 	.word	0x833fffe7

0800054c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800054c:	6803      	ldr	r3, [r0, #0]
{
 800054e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000550:	689b      	ldr	r3, [r3, #8]
{
 8000552:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000554:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000556:	075b      	lsls	r3, r3, #29
 8000558:	d41a      	bmi.n	8000590 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800055a:	0025      	movs	r5, r4
 800055c:	3540      	adds	r5, #64	; 0x40
 800055e:	782b      	ldrb	r3, [r5, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d015      	beq.n	8000590 <HAL_ADC_Start+0x44>
 8000564:	2301      	movs	r3, #1
 8000566:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000568:	69e3      	ldr	r3, [r4, #28]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d111      	bne.n	8000592 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800056e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000572:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000574:	401a      	ands	r2, r3
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800057c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800057e:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000580:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000582:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000584:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000586:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000588:	6899      	ldr	r1, [r3, #8]
 800058a:	3a18      	subs	r2, #24
 800058c:	430a      	orrs	r2, r1
 800058e:	609a      	str	r2, [r3, #8]
}
 8000590:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000592:	0020      	movs	r0, r4
 8000594:	f7ff febe 	bl	8000314 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000598:	2800      	cmp	r0, #0
 800059a:	d1f9      	bne.n	8000590 <HAL_ADC_Start+0x44>
 800059c:	e7e7      	b.n	800056e <HAL_ADC_Start+0x22>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	fffff0fe 	.word	0xfffff0fe

080005a4 <HAL_ADC_Stop>:
{ 
 80005a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80005a6:	0006      	movs	r6, r0
 80005a8:	3640      	adds	r6, #64	; 0x40
 80005aa:	7833      	ldrb	r3, [r6, #0]
{ 
 80005ac:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80005ae:	2002      	movs	r0, #2
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d012      	beq.n	80005da <HAL_ADC_Stop+0x36>
 80005b4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80005b6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80005b8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80005ba:	f7ff fef7 	bl	80003ac <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80005be:	2800      	cmp	r0, #0
 80005c0:	d109      	bne.n	80005d6 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80005c2:	0020      	movs	r0, r4
 80005c4:	f7ff fe6c 	bl	80002a0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d104      	bne.n	80005d6 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80005cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005ce:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_ADC_Stop+0x38>)
 80005d0:	4013      	ands	r3, r2
 80005d2:	431d      	orrs	r5, r3
 80005d4:	6465      	str	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80005d6:	2300      	movs	r3, #0
 80005d8:	7033      	strb	r3, [r6, #0]
}
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	fffffefe 	.word	0xfffffefe

080005e0 <HAL_ADC_PollForConversion>:
{
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80005e2:	6945      	ldr	r5, [r0, #20]
{
 80005e4:	0004      	movs	r4, r0
 80005e6:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80005e8:	2d08      	cmp	r5, #8
 80005ea:	d00d      	beq.n	8000608 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	2001      	movs	r0, #1
 80005f0:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80005f2:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80005f4:	4203      	tst	r3, r0
 80005f6:	d007      	beq.n	8000608 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005f8:	2320      	movs	r3, #32
 80005fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80005fc:	3440      	adds	r4, #64	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005fe:	4313      	orrs	r3, r2
 8000600:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000602:	2300      	movs	r3, #0
 8000604:	7023      	strb	r3, [r4, #0]
}
 8000606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8000608:	f7ff fe34 	bl	8000274 <HAL_GetTick>
 800060c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	422a      	tst	r2, r5
 8000614:	d023      	beq.n	800065e <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800061a:	0092      	lsls	r2, r2, #2
 800061c:	430a      	orrs	r2, r1
 800061e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000620:	22c0      	movs	r2, #192	; 0xc0
 8000622:	68d9      	ldr	r1, [r3, #12]
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	4211      	tst	r1, r2
 8000628:	d112      	bne.n	8000650 <HAL_ADC_PollForConversion+0x70>
 800062a:	6a22      	ldr	r2, [r4, #32]
 800062c:	2a00      	cmp	r2, #0
 800062e:	d10f      	bne.n	8000650 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	0712      	lsls	r2, r2, #28
 8000634:	d50c      	bpl.n	8000650 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	0752      	lsls	r2, r2, #29
 800063a:	d423      	bmi.n	8000684 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800063c:	210c      	movs	r1, #12
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	438a      	bics	r2, r1
 8000642:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000644:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000646:	4914      	ldr	r1, [pc, #80]	; (8000698 <HAL_ADC_PollForConversion+0xb8>)
 8000648:	4011      	ands	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_OK;
 8000650:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000652:	69a2      	ldr	r2, [r4, #24]
 8000654:	4282      	cmp	r2, r0
 8000656:	d1d6      	bne.n	8000606 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000658:	220c      	movs	r2, #12
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	e7d3      	b.n	8000606 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800065e:	1c72      	adds	r2, r6, #1
 8000660:	d0d6      	beq.n	8000610 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000662:	2e00      	cmp	r6, #0
 8000664:	d108      	bne.n	8000678 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000666:	2304      	movs	r3, #4
 8000668:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800066a:	3440      	adds	r4, #64	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800066c:	4313      	orrs	r3, r2
 800066e:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8000670:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000672:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8000674:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8000676:	e7c6      	b.n	8000606 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000678:	f7ff fdfc 	bl	8000274 <HAL_GetTick>
 800067c:	1bc0      	subs	r0, r0, r7
 800067e:	4286      	cmp	r6, r0
 8000680:	d2c5      	bcs.n	800060e <HAL_ADC_PollForConversion+0x2e>
 8000682:	e7f0      	b.n	8000666 <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000684:	2220      	movs	r2, #32
 8000686:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000688:	430a      	orrs	r2, r1
 800068a:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800068c:	2201      	movs	r2, #1
 800068e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000690:	430a      	orrs	r2, r1
 8000692:	64a2      	str	r2, [r4, #72]	; 0x48
 8000694:	e7dc      	b.n	8000650 <HAL_ADC_PollForConversion+0x70>
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	fffffefe 	.word	0xfffffefe

0800069c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800069c:	6803      	ldr	r3, [r0, #0]
 800069e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80006a0:	4770      	bx	lr
	...

080006a4 <HAL_ADC_ConfigChannel>:
{
 80006a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80006a6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80006a8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80006aa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006ac:	3440      	adds	r4, #64	; 0x40
 80006ae:	7823      	ldrb	r3, [r4, #0]
{
 80006b0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80006b2:	2002      	movs	r0, #2
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d02b      	beq.n	8000710 <HAL_ADC_ConfigChannel+0x6c>
 80006b8:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ba:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006bc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006be:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80006c0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006c2:	0740      	lsls	r0, r0, #29
 80006c4:	d452      	bmi.n	800076c <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80006c6:	482c      	ldr	r0, [pc, #176]	; (8000778 <HAL_ADC_ConfigChannel+0xd4>)
 80006c8:	684f      	ldr	r7, [r1, #4]
 80006ca:	680d      	ldr	r5, [r1, #0]
 80006cc:	4287      	cmp	r7, r0
 80006ce:	d03b      	beq.n	8000748 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006d0:	40ab      	lsls	r3, r5
 80006d2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006d4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006d6:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006d8:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006da:	4338      	orrs	r0, r7
 80006dc:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006de:	429e      	cmp	r6, r3
 80006e0:	d00f      	beq.n	8000702 <HAL_ADC_ConfigChannel+0x5e>
 80006e2:	3e01      	subs	r6, #1
 80006e4:	2e06      	cmp	r6, #6
 80006e6:	d90c      	bls.n	8000702 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006e8:	688b      	ldr	r3, [r1, #8]
 80006ea:	2107      	movs	r1, #7
 80006ec:	6950      	ldr	r0, [r2, #20]
 80006ee:	4008      	ands	r0, r1
 80006f0:	4283      	cmp	r3, r0
 80006f2:	d006      	beq.n	8000702 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006f4:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80006f6:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006f8:	4388      	bics	r0, r1
 80006fa:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80006fc:	6950      	ldr	r0, [r2, #20]
 80006fe:	4303      	orrs	r3, r0
 8000700:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000702:	002b      	movs	r3, r5
 8000704:	3b10      	subs	r3, #16
 8000706:	2b01      	cmp	r3, #1
 8000708:	d903      	bls.n	8000712 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800070a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800070c:	2300      	movs	r3, #0
 800070e:	7023      	strb	r3, [r4, #0]
}
 8000710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_ADC_ConfigChannel+0xd8>)
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	6819      	ldr	r1, [r3, #0]
 8000718:	2d10      	cmp	r5, #16
 800071a:	d013      	beq.n	8000744 <HAL_ADC_ConfigChannel+0xa0>
 800071c:	03d2      	lsls	r2, r2, #15
 800071e:	430a      	orrs	r2, r1
 8000720:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000722:	2d10      	cmp	r5, #16
 8000724:	d1f1      	bne.n	800070a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_ADC_ConfigChannel+0xdc>)
 8000728:	4916      	ldr	r1, [pc, #88]	; (8000784 <HAL_ADC_ConfigChannel+0xe0>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	f7ff fcec 	bl	8000108 <__udivsi3>
 8000730:	230a      	movs	r3, #10
 8000732:	4358      	muls	r0, r3
 8000734:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000736:	9b01      	ldr	r3, [sp, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0e6      	beq.n	800070a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800073c:	9b01      	ldr	r3, [sp, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	e7f8      	b.n	8000736 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000744:	0412      	lsls	r2, r2, #16
 8000746:	e7ea      	b.n	800071e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000748:	40ab      	lsls	r3, r5
 800074a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800074c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800074e:	002b      	movs	r3, r5
 8000750:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000752:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000754:	2b01      	cmp	r3, #1
 8000756:	d8d8      	bhi.n	800070a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_ADC_ConfigChannel+0xd8>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	2d10      	cmp	r5, #16
 800075e:	d003      	beq.n	8000768 <HAL_ADC_ConfigChannel+0xc4>
 8000760:	4909      	ldr	r1, [pc, #36]	; (8000788 <HAL_ADC_ConfigChannel+0xe4>)
 8000762:	400a      	ands	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	e7d0      	b.n	800070a <HAL_ADC_ConfigChannel+0x66>
 8000768:	4908      	ldr	r1, [pc, #32]	; (800078c <HAL_ADC_ConfigChannel+0xe8>)
 800076a:	e7fa      	b.n	8000762 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800076c:	2220      	movs	r2, #32
 800076e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000770:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000772:	430a      	orrs	r2, r1
 8000774:	646a      	str	r2, [r5, #68]	; 0x44
 8000776:	e7c9      	b.n	800070c <HAL_ADC_ConfigChannel+0x68>
 8000778:	00001001 	.word	0x00001001
 800077c:	40012708 	.word	0x40012708
 8000780:	20000000 	.word	0x20000000
 8000784:	000f4240 	.word	0x000f4240
 8000788:	ffbfffff 	.word	0xffbfffff
 800078c:	ff7fffff 	.word	0xff7fffff

08000790 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000794:	2800      	cmp	r0, #0
 8000796:	da14      	bge.n	80007c2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	230f      	movs	r3, #15
 800079a:	b2c0      	uxtb	r0, r0
 800079c:	4003      	ands	r3, r0
 800079e:	3b08      	subs	r3, #8
 80007a0:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <HAL_NVIC_SetPriority+0x58>)
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	189b      	adds	r3, r3, r2
 80007a8:	2203      	movs	r2, #3
 80007aa:	4010      	ands	r0, r2
 80007ac:	4090      	lsls	r0, r2
 80007ae:	32fc      	adds	r2, #252	; 0xfc
 80007b0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b8:	69dc      	ldr	r4, [r3, #28]
 80007ba:	43ac      	bics	r4, r5
 80007bc:	4321      	orrs	r1, r4
 80007be:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c2:	2503      	movs	r5, #3
 80007c4:	0883      	lsrs	r3, r0, #2
 80007c6:	4028      	ands	r0, r5
 80007c8:	40a8      	lsls	r0, r5
 80007ca:	35fc      	adds	r5, #252	; 0xfc
 80007cc:	002e      	movs	r6, r5
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <HAL_NVIC_SetPriority+0x5c>)
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	189b      	adds	r3, r3, r2
 80007d4:	22c0      	movs	r2, #192	; 0xc0
 80007d6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d8:	4029      	ands	r1, r5
 80007da:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	589c      	ldr	r4, [r3, r2]
 80007e0:	43b4      	bics	r4, r6
 80007e2:	4321      	orrs	r1, r4
 80007e4:	5099      	str	r1, [r3, r2]
 80007e6:	e7eb      	b.n	80007c0 <HAL_NVIC_SetPriority+0x30>
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <HAL_SYSTICK_Config+0x28>)
 80007f2:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d80d      	bhi.n	8000816 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fa:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000800:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000802:	6a03      	ldr	r3, [r0, #32]
 8000804:	0609      	lsls	r1, r1, #24
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	430b      	orrs	r3, r1
 800080c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000810:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000812:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000814:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000816:	4770      	bx	lr
 8000818:	00ffffff 	.word	0x00ffffff
 800081c:	e000e010 	.word	0xe000e010
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000826:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000828:	2804      	cmp	r0, #4
 800082a:	d102      	bne.n	8000832 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800082c:	4310      	orrs	r0, r2
 800082e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000830:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000832:	2104      	movs	r1, #4
 8000834:	438a      	bics	r2, r1
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	e7fa      	b.n	8000830 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000840:	4770      	bx	lr

08000842 <HAL_SYSTICK_IRQHandler>:
{
 8000842:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000844:	f7ff fffc 	bl	8000840 <HAL_SYSTICK_Callback>
}
 8000848:	bd10      	pop	{r4, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800084e:	680b      	ldr	r3, [r1, #0]
{ 
 8000850:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000852:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000854:	2300      	movs	r3, #0
{ 
 8000856:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000858:	9a02      	ldr	r2, [sp, #8]
 800085a:	40da      	lsrs	r2, r3
 800085c:	d101      	bne.n	8000862 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800085e:	b007      	add	sp, #28
 8000860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000862:	2201      	movs	r2, #1
 8000864:	409a      	lsls	r2, r3
 8000866:	9203      	str	r2, [sp, #12]
 8000868:	9903      	ldr	r1, [sp, #12]
 800086a:	9a02      	ldr	r2, [sp, #8]
 800086c:	400a      	ands	r2, r1
 800086e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000870:	d100      	bne.n	8000874 <HAL_GPIO_Init+0x28>
 8000872:	e08c      	b.n	800098e <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000874:	9a01      	ldr	r2, [sp, #4]
 8000876:	2110      	movs	r1, #16
 8000878:	6852      	ldr	r2, [r2, #4]
 800087a:	0016      	movs	r6, r2
 800087c:	438e      	bics	r6, r1
 800087e:	2e02      	cmp	r6, #2
 8000880:	d10e      	bne.n	80008a0 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000882:	2507      	movs	r5, #7
 8000884:	401d      	ands	r5, r3
 8000886:	00ad      	lsls	r5, r5, #2
 8000888:	3901      	subs	r1, #1
 800088a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800088c:	08dc      	lsrs	r4, r3, #3
 800088e:	00a4      	lsls	r4, r4, #2
 8000890:	1904      	adds	r4, r0, r4
 8000892:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000894:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000896:	9901      	ldr	r1, [sp, #4]
 8000898:	6909      	ldr	r1, [r1, #16]
 800089a:	40a9      	lsls	r1, r5
 800089c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800089e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80008a0:	2403      	movs	r4, #3
 80008a2:	005f      	lsls	r7, r3, #1
 80008a4:	40bc      	lsls	r4, r7
 80008a6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80008a8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008aa:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80008ac:	4025      	ands	r5, r4
 80008ae:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b0:	2503      	movs	r5, #3
 80008b2:	4015      	ands	r5, r2
 80008b4:	40bd      	lsls	r5, r7
 80008b6:	4661      	mov	r1, ip
 80008b8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80008ba:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008bc:	2e01      	cmp	r6, #1
 80008be:	d80f      	bhi.n	80008e0 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008c0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80008c2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008c4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008c6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008c8:	40bd      	lsls	r5, r7
 80008ca:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80008cc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80008ce:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80008d0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80008d4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008d6:	2101      	movs	r1, #1
 80008d8:	400d      	ands	r5, r1
 80008da:	409d      	lsls	r5, r3
 80008dc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80008de:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80008e0:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008e2:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008e6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008e8:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008ea:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008ec:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008ee:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80008f0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008f2:	420a      	tst	r2, r1
 80008f4:	d04b      	beq.n	800098e <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2101      	movs	r1, #1
 80008f8:	4c26      	ldr	r4, [pc, #152]	; (8000994 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008fa:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008fe:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000900:	430d      	orrs	r5, r1
 8000902:	61a5      	str	r5, [r4, #24]
 8000904:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000906:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000908:	400c      	ands	r4, r1
 800090a:	9405      	str	r4, [sp, #20]
 800090c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800090e:	240f      	movs	r4, #15
 8000910:	4921      	ldr	r1, [pc, #132]	; (8000998 <HAL_GPIO_Init+0x14c>)
 8000912:	00ad      	lsls	r5, r5, #2
 8000914:	00b6      	lsls	r6, r6, #2
 8000916:	186d      	adds	r5, r5, r1
 8000918:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800091a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800091c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800091e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000920:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000922:	2400      	movs	r4, #0
 8000924:	4288      	cmp	r0, r1
 8000926:	d00c      	beq.n	8000942 <HAL_GPIO_Init+0xf6>
 8000928:	491c      	ldr	r1, [pc, #112]	; (800099c <HAL_GPIO_Init+0x150>)
 800092a:	3401      	adds	r4, #1
 800092c:	4288      	cmp	r0, r1
 800092e:	d008      	beq.n	8000942 <HAL_GPIO_Init+0xf6>
 8000930:	491b      	ldr	r1, [pc, #108]	; (80009a0 <HAL_GPIO_Init+0x154>)
 8000932:	3401      	adds	r4, #1
 8000934:	4288      	cmp	r0, r1
 8000936:	d004      	beq.n	8000942 <HAL_GPIO_Init+0xf6>
 8000938:	491a      	ldr	r1, [pc, #104]	; (80009a4 <HAL_GPIO_Init+0x158>)
 800093a:	3403      	adds	r4, #3
 800093c:	4288      	cmp	r0, r1
 800093e:	d100      	bne.n	8000942 <HAL_GPIO_Init+0xf6>
 8000940:	3c02      	subs	r4, #2
 8000942:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000944:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000946:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000948:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800094a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 800094c:	4c16      	ldr	r4, [pc, #88]	; (80009a8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800094e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000950:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000952:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000954:	03d1      	lsls	r1, r2, #15
 8000956:	d401      	bmi.n	800095c <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000958:	003e      	movs	r6, r7
 800095a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800095c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800095e:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000960:	9e00      	ldr	r6, [sp, #0]
 8000962:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000964:	0391      	lsls	r1, r2, #14
 8000966:	d401      	bmi.n	800096c <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000968:	003e      	movs	r6, r7
 800096a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800096c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800096e:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000970:	9e00      	ldr	r6, [sp, #0]
 8000972:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000974:	02d1      	lsls	r1, r2, #11
 8000976:	d401      	bmi.n	800097c <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000978:	003e      	movs	r6, r7
 800097a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800097c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800097e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000980:	9f00      	ldr	r7, [sp, #0]
 8000982:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000984:	0292      	lsls	r2, r2, #10
 8000986:	d401      	bmi.n	800098c <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000988:	402e      	ands	r6, r5
 800098a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800098c:	60e7      	str	r7, [r4, #12]
    position++;
 800098e:	3301      	adds	r3, #1
 8000990:	e762      	b.n	8000858 <HAL_GPIO_Init+0xc>
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000
 800099c:	48000400 	.word	0x48000400
 80009a0:	48000800 	.word	0x48000800
 80009a4:	48000c00 	.word	0x48000c00
 80009a8:	40010400 	.word	0x40010400

080009ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009b2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009b4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80009b6:	e7fc      	b.n	80009b2 <HAL_GPIO_WritePin+0x6>

080009b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ba:	6803      	ldr	r3, [r0, #0]
{
 80009bc:	b085      	sub	sp, #20
 80009be:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c0:	07db      	lsls	r3, r3, #31
 80009c2:	d42f      	bmi.n	8000a24 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	079b      	lsls	r3, r3, #30
 80009c8:	d500      	bpl.n	80009cc <HAL_RCC_OscConfig+0x14>
 80009ca:	e081      	b.n	8000ad0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	071b      	lsls	r3, r3, #28
 80009d0:	d500      	bpl.n	80009d4 <HAL_RCC_OscConfig+0x1c>
 80009d2:	e0bc      	b.n	8000b4e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	075b      	lsls	r3, r3, #29
 80009d8:	d500      	bpl.n	80009dc <HAL_RCC_OscConfig+0x24>
 80009da:	e0df      	b.n	8000b9c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	06db      	lsls	r3, r3, #27
 80009e0:	d51a      	bpl.n	8000a18 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80009e2:	696a      	ldr	r2, [r5, #20]
 80009e4:	4cb5      	ldr	r4, [pc, #724]	; (8000cbc <HAL_RCC_OscConfig+0x304>)
 80009e6:	2304      	movs	r3, #4
 80009e8:	2a01      	cmp	r2, #1
 80009ea:	d000      	beq.n	80009ee <HAL_RCC_OscConfig+0x36>
 80009ec:	e14b      	b.n	8000c86 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80009ee:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80009f0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80009f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009f8:	431a      	orrs	r2, r3
 80009fa:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009fc:	f7ff fc3a 	bl	8000274 <HAL_GetTick>
 8000a00:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a04:	4233      	tst	r3, r6
 8000a06:	d100      	bne.n	8000a0a <HAL_RCC_OscConfig+0x52>
 8000a08:	e136      	b.n	8000c78 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a0a:	21f8      	movs	r1, #248	; 0xf8
 8000a0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a0e:	69ab      	ldr	r3, [r5, #24]
 8000a10:	438a      	bics	r2, r1
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a18:	6a29      	ldr	r1, [r5, #32]
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d000      	beq.n	8000a20 <HAL_RCC_OscConfig+0x68>
 8000a1e:	e159      	b.n	8000cd4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a20:	2000      	movs	r0, #0
 8000a22:	e013      	b.n	8000a4c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a24:	210c      	movs	r1, #12
 8000a26:	4ca5      	ldr	r4, [pc, #660]	; (8000cbc <HAL_RCC_OscConfig+0x304>)
 8000a28:	6862      	ldr	r2, [r4, #4]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	2a04      	cmp	r2, #4
 8000a2e:	d006      	beq.n	8000a3e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	400b      	ands	r3, r1
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d10b      	bne.n	8000a50 <HAL_RCC_OscConfig+0x98>
 8000a38:	6863      	ldr	r3, [r4, #4]
 8000a3a:	03db      	lsls	r3, r3, #15
 8000a3c:	d508      	bpl.n	8000a50 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	039b      	lsls	r3, r3, #14
 8000a42:	d5bf      	bpl.n	80009c4 <HAL_RCC_OscConfig+0xc>
 8000a44:	686b      	ldr	r3, [r5, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1bc      	bne.n	80009c4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a4a:	2001      	movs	r0, #1
}
 8000a4c:	b005      	add	sp, #20
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a50:	686b      	ldr	r3, [r5, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d113      	bne.n	8000a7e <HAL_RCC_OscConfig+0xc6>
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	025b      	lsls	r3, r3, #9
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a60:	f7ff fc08 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a64:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a68:	02b6      	lsls	r6, r6, #10
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	4233      	tst	r3, r6
 8000a6e:	d1a9      	bne.n	80009c4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a70:	f7ff fc00 	bl	8000274 <HAL_GetTick>
 8000a74:	1bc0      	subs	r0, r0, r7
 8000a76:	2864      	cmp	r0, #100	; 0x64
 8000a78:	d9f7      	bls.n	8000a6a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	e7e6      	b.n	8000a4c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d116      	bne.n	8000ab0 <HAL_RCC_OscConfig+0xf8>
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	4a8e      	ldr	r2, [pc, #568]	; (8000cc0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a86:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a88:	4013      	ands	r3, r2
 8000a8a:	6023      	str	r3, [r4, #0]
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	4a8d      	ldr	r2, [pc, #564]	; (8000cc4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a90:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a92:	4013      	ands	r3, r2
 8000a94:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a96:	f7ff fbed 	bl	8000274 <HAL_GetTick>
 8000a9a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	4233      	tst	r3, r6
 8000aa0:	d100      	bne.n	8000aa4 <HAL_RCC_OscConfig+0xec>
 8000aa2:	e78f      	b.n	80009c4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aa4:	f7ff fbe6 	bl	8000274 <HAL_GetTick>
 8000aa8:	1bc0      	subs	r0, r0, r7
 8000aaa:	2864      	cmp	r0, #100	; 0x64
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0xe4>
 8000aae:	e7e4      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d105      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x108>
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	6822      	ldr	r2, [r4, #0]
 8000ab8:	02db      	lsls	r3, r3, #11
 8000aba:	4313      	orrs	r3, r2
 8000abc:	6023      	str	r3, [r4, #0]
 8000abe:	e7ca      	b.n	8000a56 <HAL_RCC_OscConfig+0x9e>
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	4a7f      	ldr	r2, [pc, #508]	; (8000cc0 <HAL_RCC_OscConfig+0x308>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	6023      	str	r3, [r4, #0]
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	4a7e      	ldr	r2, [pc, #504]	; (8000cc4 <HAL_RCC_OscConfig+0x30c>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	e7c6      	b.n	8000a5e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	4c7a      	ldr	r4, [pc, #488]	; (8000cbc <HAL_RCC_OscConfig+0x304>)
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	4213      	tst	r3, r2
 8000ad8:	d006      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ada:	6863      	ldr	r3, [r4, #4]
 8000adc:	4013      	ands	r3, r2
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d110      	bne.n	8000b04 <HAL_RCC_OscConfig+0x14c>
 8000ae2:	6863      	ldr	r3, [r4, #4]
 8000ae4:	03db      	lsls	r3, r3, #15
 8000ae6:	d40d      	bmi.n	8000b04 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	079b      	lsls	r3, r3, #30
 8000aec:	d502      	bpl.n	8000af4 <HAL_RCC_OscConfig+0x13c>
 8000aee:	68eb      	ldr	r3, [r5, #12]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d1aa      	bne.n	8000a4a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af4:	21f8      	movs	r1, #248	; 0xf8
 8000af6:	6822      	ldr	r2, [r4, #0]
 8000af8:	692b      	ldr	r3, [r5, #16]
 8000afa:	438a      	bics	r2, r1
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	6023      	str	r3, [r4, #0]
 8000b02:	e763      	b.n	80009cc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b04:	68ea      	ldr	r2, [r5, #12]
 8000b06:	2301      	movs	r3, #1
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d00f      	beq.n	8000b2c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000b0c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000b10:	4313      	orrs	r3, r2
 8000b12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b14:	f7ff fbae 	bl	8000274 <HAL_GetTick>
 8000b18:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	4233      	tst	r3, r6
 8000b1e:	d1e9      	bne.n	8000af4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b20:	f7ff fba8 	bl	8000274 <HAL_GetTick>
 8000b24:	1bc0      	subs	r0, r0, r7
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9f7      	bls.n	8000b1a <HAL_RCC_OscConfig+0x162>
 8000b2a:	e7a6      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000b2c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b2e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000b30:	439a      	bics	r2, r3
 8000b32:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000b34:	f7ff fb9e 	bl	8000274 <HAL_GetTick>
 8000b38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	4233      	tst	r3, r6
 8000b3e:	d100      	bne.n	8000b42 <HAL_RCC_OscConfig+0x18a>
 8000b40:	e744      	b.n	80009cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b42:	f7ff fb97 	bl	8000274 <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	2802      	cmp	r0, #2
 8000b4a:	d9f6      	bls.n	8000b3a <HAL_RCC_OscConfig+0x182>
 8000b4c:	e795      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b4e:	69ea      	ldr	r2, [r5, #28]
 8000b50:	2301      	movs	r3, #1
 8000b52:	4c5a      	ldr	r4, [pc, #360]	; (8000cbc <HAL_RCC_OscConfig+0x304>)
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d010      	beq.n	8000b7a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000b58:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b5a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b60:	f7ff fb88 	bl	8000274 <HAL_GetTick>
 8000b64:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b68:	4233      	tst	r3, r6
 8000b6a:	d000      	beq.n	8000b6e <HAL_RCC_OscConfig+0x1b6>
 8000b6c:	e732      	b.n	80009d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fb81 	bl	8000274 <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x1ae>
 8000b78:	e77f      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000b7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b7c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000b7e:	439a      	bics	r2, r3
 8000b80:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b82:	f7ff fb77 	bl	8000274 <HAL_GetTick>
 8000b86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b8a:	4233      	tst	r3, r6
 8000b8c:	d100      	bne.n	8000b90 <HAL_RCC_OscConfig+0x1d8>
 8000b8e:	e721      	b.n	80009d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b90:	f7ff fb70 	bl	8000274 <HAL_GetTick>
 8000b94:	1bc0      	subs	r0, r0, r7
 8000b96:	2802      	cmp	r0, #2
 8000b98:	d9f6      	bls.n	8000b88 <HAL_RCC_OscConfig+0x1d0>
 8000b9a:	e76e      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b9c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b9e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba0:	4c46      	ldr	r4, [pc, #280]	; (8000cbc <HAL_RCC_OscConfig+0x304>)
 8000ba2:	0552      	lsls	r2, r2, #21
 8000ba4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000ba6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba8:	4213      	tst	r3, r2
 8000baa:	d108      	bne.n	8000bbe <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	69e3      	ldr	r3, [r4, #28]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61e3      	str	r3, [r4, #28]
 8000bb2:	69e3      	ldr	r3, [r4, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbe:	2780      	movs	r7, #128	; 0x80
 8000bc0:	4e41      	ldr	r6, [pc, #260]	; (8000cc8 <HAL_RCC_OscConfig+0x310>)
 8000bc2:	007f      	lsls	r7, r7, #1
 8000bc4:	6833      	ldr	r3, [r6, #0]
 8000bc6:	423b      	tst	r3, r7
 8000bc8:	d006      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bca:	68ab      	ldr	r3, [r5, #8]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d113      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x240>
 8000bd0:	6a22      	ldr	r2, [r4, #32]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	6223      	str	r3, [r4, #32]
 8000bd6:	e030      	b.n	8000c3a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bd8:	6833      	ldr	r3, [r6, #0]
 8000bda:	433b      	orrs	r3, r7
 8000bdc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000bde:	f7ff fb49 	bl	8000274 <HAL_GetTick>
 8000be2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be4:	6833      	ldr	r3, [r6, #0]
 8000be6:	423b      	tst	r3, r7
 8000be8:	d1ef      	bne.n	8000bca <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bea:	f7ff fb43 	bl	8000274 <HAL_GetTick>
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	1ac0      	subs	r0, r0, r3
 8000bf2:	2864      	cmp	r0, #100	; 0x64
 8000bf4:	d9f6      	bls.n	8000be4 <HAL_RCC_OscConfig+0x22c>
 8000bf6:	e740      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
 8000bf8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d114      	bne.n	8000c28 <HAL_RCC_OscConfig+0x270>
 8000bfe:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c00:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c02:	4393      	bics	r3, r2
 8000c04:	6223      	str	r3, [r4, #32]
 8000c06:	6a23      	ldr	r3, [r4, #32]
 8000c08:	3203      	adds	r2, #3
 8000c0a:	4393      	bics	r3, r2
 8000c0c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fb31 	bl	8000274 <HAL_GetTick>
 8000c12:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c14:	6a23      	ldr	r3, [r4, #32]
 8000c16:	423b      	tst	r3, r7
 8000c18:	d025      	beq.n	8000c66 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c1a:	f7ff fb2b 	bl	8000274 <HAL_GetTick>
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_RCC_OscConfig+0x314>)
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x25c>
 8000c26:	e728      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d10b      	bne.n	8000c44 <HAL_RCC_OscConfig+0x28c>
 8000c2c:	6a21      	ldr	r1, [r4, #32]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6223      	str	r3, [r4, #32]
 8000c34:	6a23      	ldr	r3, [r4, #32]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fb1b 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c3e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000c40:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c42:	e00d      	b.n	8000c60 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c44:	6a23      	ldr	r3, [r4, #32]
 8000c46:	4393      	bics	r3, r2
 8000c48:	2204      	movs	r2, #4
 8000c4a:	6223      	str	r3, [r4, #32]
 8000c4c:	6a23      	ldr	r3, [r4, #32]
 8000c4e:	4393      	bics	r3, r2
 8000c50:	e7c0      	b.n	8000bd4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c52:	f7ff fb0f 	bl	8000274 <HAL_GetTick>
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_RCC_OscConfig+0x314>)
 8000c58:	1b80      	subs	r0, r0, r6
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d900      	bls.n	8000c60 <HAL_RCC_OscConfig+0x2a8>
 8000c5e:	e70c      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c60:	6a23      	ldr	r3, [r4, #32]
 8000c62:	423b      	tst	r3, r7
 8000c64:	d0f5      	beq.n	8000c52 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000c66:	9b00      	ldr	r3, [sp, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d000      	beq.n	8000c6e <HAL_RCC_OscConfig+0x2b6>
 8000c6c:	e6b6      	b.n	80009dc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c6e:	69e3      	ldr	r3, [r4, #28]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_RCC_OscConfig+0x318>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	61e3      	str	r3, [r4, #28]
 8000c76:	e6b1      	b.n	80009dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c78:	f7ff fafc 	bl	8000274 <HAL_GetTick>
 8000c7c:	1bc0      	subs	r0, r0, r7
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d800      	bhi.n	8000c84 <HAL_RCC_OscConfig+0x2cc>
 8000c82:	e6be      	b.n	8000a02 <HAL_RCC_OscConfig+0x4a>
 8000c84:	e6f9      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c86:	3205      	adds	r2, #5
 8000c88:	d103      	bne.n	8000c92 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000c8c:	439a      	bics	r2, r3
 8000c8e:	6362      	str	r2, [r4, #52]	; 0x34
 8000c90:	e6bb      	b.n	8000a0a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c92:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c94:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c96:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000c98:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c9a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c9e:	4393      	bics	r3, r2
 8000ca0:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fae7 	bl	8000274 <HAL_GetTick>
 8000ca6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000caa:	4233      	tst	r3, r6
 8000cac:	d100      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x2f8>
 8000cae:	e6b3      	b.n	8000a18 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cb0:	f7ff fae0 	bl	8000274 <HAL_GetTick>
 8000cb4:	1bc0      	subs	r0, r0, r7
 8000cb6:	2802      	cmp	r0, #2
 8000cb8:	d9f6      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x2f0>
 8000cba:	e6de      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	fffeffff 	.word	0xfffeffff
 8000cc4:	fffbffff 	.word	0xfffbffff
 8000cc8:	40007000 	.word	0x40007000
 8000ccc:	00001388 	.word	0x00001388
 8000cd0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	4c26      	ldr	r4, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000cd8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cda:	6863      	ldr	r3, [r4, #4]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d100      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x32c>
 8000ce2:	e6b3      	b.n	8000a4c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_RCC_OscConfig+0x3bc>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cec:	2902      	cmp	r1, #2
 8000cee:	d12f      	bne.n	8000d50 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fac0 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cf6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf8:	04b6      	lsls	r6, r6, #18
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	4233      	tst	r3, r6
 8000cfe:	d121      	bne.n	8000d44 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d00:	220f      	movs	r2, #15
 8000d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d04:	4393      	bics	r3, r2
 8000d06:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d10:	6862      	ldr	r2, [r4, #4]
 8000d12:	430b      	orrs	r3, r1
 8000d14:	4918      	ldr	r1, [pc, #96]	; (8000d78 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d16:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d18:	400a      	ands	r2, r1
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	045b      	lsls	r3, r3, #17
 8000d24:	4313      	orrs	r3, r2
 8000d26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d28:	f7ff faa4 	bl	8000274 <HAL_GetTick>
 8000d2c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d2e:	04ad      	lsls	r5, r5, #18
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	422b      	tst	r3, r5
 8000d34:	d000      	beq.n	8000d38 <HAL_RCC_OscConfig+0x380>
 8000d36:	e673      	b.n	8000a20 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d38:	f7ff fa9c 	bl	8000274 <HAL_GetTick>
 8000d3c:	1b80      	subs	r0, r0, r6
 8000d3e:	2802      	cmp	r0, #2
 8000d40:	d9f6      	bls.n	8000d30 <HAL_RCC_OscConfig+0x378>
 8000d42:	e69a      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d44:	f7ff fa96 	bl	8000274 <HAL_GetTick>
 8000d48:	1bc0      	subs	r0, r0, r7
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9d5      	bls.n	8000cfa <HAL_RCC_OscConfig+0x342>
 8000d4e:	e694      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000d50:	f7ff fa90 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d54:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d58:	04ad      	lsls	r5, r5, #18
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	422b      	tst	r3, r5
 8000d5e:	d100      	bne.n	8000d62 <HAL_RCC_OscConfig+0x3aa>
 8000d60:	e65e      	b.n	8000a20 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d62:	f7ff fa87 	bl	8000274 <HAL_GetTick>
 8000d66:	1b80      	subs	r0, r0, r6
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d9f6      	bls.n	8000d5a <HAL_RCC_OscConfig+0x3a2>
 8000d6c:	e685      	b.n	8000a7a <HAL_RCC_OscConfig+0xc2>
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40021000 	.word	0x40021000
 8000d74:	feffffff 	.word	0xfeffffff
 8000d78:	ffc2ffff 	.word	0xffc2ffff

08000d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d7c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d7e:	4c14      	ldr	r4, [pc, #80]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000d80:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d82:	2210      	movs	r2, #16
 8000d84:	0021      	movs	r1, r4
 8000d86:	4668      	mov	r0, sp
 8000d88:	f000 fa8c 	bl	80012a4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000d8c:	0021      	movs	r1, r4
 8000d8e:	ad04      	add	r5, sp, #16
 8000d90:	2210      	movs	r2, #16
 8000d92:	3110      	adds	r1, #16
 8000d94:	0028      	movs	r0, r5
 8000d96:	f000 fa85 	bl	80012a4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d9a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000d9c:	4e0d      	ldr	r6, [pc, #52]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d9e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000da0:	401a      	ands	r2, r3
 8000da2:	2a08      	cmp	r2, #8
 8000da4:	d111      	bne.n	8000dca <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000da6:	200f      	movs	r0, #15
 8000da8:	466a      	mov	r2, sp
 8000daa:	0c99      	lsrs	r1, r3, #18
 8000dac:	4001      	ands	r1, r0
 8000dae:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000db0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000db2:	4002      	ands	r2, r0
 8000db4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000db6:	03db      	lsls	r3, r3, #15
 8000db8:	d505      	bpl.n	8000dc6 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000dbc:	f7ff f9a4 	bl	8000108 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000dc0:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000dc2:	b008      	add	sp, #32
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_RCC_GetSysClockFreq+0x60>)
 8000dc8:	e7fa      	b.n	8000dc0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000dcc:	e7f9      	b.n	8000dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	080012d0 	.word	0x080012d0
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	007a1200 	.word	0x007a1200
 8000ddc:	003d0900 	.word	0x003d0900

08000de0 <HAL_RCC_ClockConfig>:
{
 8000de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de2:	2201      	movs	r2, #1
 8000de4:	4c43      	ldr	r4, [pc, #268]	; (8000ef4 <HAL_RCC_ClockConfig+0x114>)
{
 8000de6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de8:	6823      	ldr	r3, [r4, #0]
{
 8000dea:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dec:	4013      	ands	r3, r2
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d31c      	bcc.n	8000e2c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df2:	6832      	ldr	r2, [r6, #0]
 8000df4:	0793      	lsls	r3, r2, #30
 8000df6:	d423      	bmi.n	8000e40 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000df8:	07d3      	lsls	r3, r2, #31
 8000dfa:	d429      	bmi.n	8000e50 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	6822      	ldr	r2, [r4, #0]
 8000e00:	401a      	ands	r2, r3
 8000e02:	4297      	cmp	r7, r2
 8000e04:	d367      	bcc.n	8000ed6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e06:	6833      	ldr	r3, [r6, #0]
 8000e08:	4c3b      	ldr	r4, [pc, #236]	; (8000ef8 <HAL_RCC_ClockConfig+0x118>)
 8000e0a:	075b      	lsls	r3, r3, #29
 8000e0c:	d46a      	bmi.n	8000ee4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e0e:	f7ff ffb5 	bl	8000d7c <HAL_RCC_GetSysClockFreq>
 8000e12:	6863      	ldr	r3, [r4, #4]
 8000e14:	4a39      	ldr	r2, [pc, #228]	; (8000efc <HAL_RCC_ClockConfig+0x11c>)
 8000e16:	061b      	lsls	r3, r3, #24
 8000e18:	0f1b      	lsrs	r3, r3, #28
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	40d8      	lsrs	r0, r3
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_RCC_ClockConfig+0x120>)
 8000e20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff f9fc 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	4393      	bics	r3, r2
 8000e30:	430b      	orrs	r3, r1
 8000e32:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	4013      	ands	r3, r2
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d0da      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
}
 8000e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e40:	20f0      	movs	r0, #240	; 0xf0
 8000e42:	492d      	ldr	r1, [pc, #180]	; (8000ef8 <HAL_RCC_ClockConfig+0x118>)
 8000e44:	684b      	ldr	r3, [r1, #4]
 8000e46:	4383      	bics	r3, r0
 8000e48:	68b0      	ldr	r0, [r6, #8]
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e7d3      	b.n	8000df8 <HAL_RCC_ClockConfig+0x18>
 8000e50:	4d29      	ldr	r5, [pc, #164]	; (8000ef8 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e52:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e54:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e56:	2a01      	cmp	r2, #1
 8000e58:	d11a      	bne.n	8000e90 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5a:	039b      	lsls	r3, r3, #14
 8000e5c:	d5ee      	bpl.n	8000e3c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5e:	2103      	movs	r1, #3
 8000e60:	686b      	ldr	r3, [r5, #4]
 8000e62:	438b      	bics	r3, r1
 8000e64:	4313      	orrs	r3, r2
 8000e66:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000e68:	f7ff fa04 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e6c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e6e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d115      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e74:	220c      	movs	r2, #12
 8000e76:	686b      	ldr	r3, [r5, #4]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d0be      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7e:	f7ff f9f9 	bl	8000274 <HAL_GetTick>
 8000e82:	9b01      	ldr	r3, [sp, #4]
 8000e84:	1ac0      	subs	r0, r0, r3
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	d9f3      	bls.n	8000e74 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	e7d6      	b.n	8000e3e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e90:	2a02      	cmp	r2, #2
 8000e92:	d102      	bne.n	8000e9a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	d4e2      	bmi.n	8000e5e <HAL_RCC_ClockConfig+0x7e>
 8000e98:	e7d0      	b.n	8000e3c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9a:	079b      	lsls	r3, r3, #30
 8000e9c:	d4df      	bmi.n	8000e5e <HAL_RCC_ClockConfig+0x7e>
 8000e9e:	e7cd      	b.n	8000e3c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d012      	beq.n	8000eca <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	686b      	ldr	r3, [r5, #4]
 8000ea8:	4213      	tst	r3, r2
 8000eaa:	d0a7      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eac:	f7ff f9e2 	bl	8000274 <HAL_GetTick>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	1ac0      	subs	r0, r0, r3
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d9f4      	bls.n	8000ea4 <HAL_RCC_ClockConfig+0xc4>
 8000eba:	e7e7      	b.n	8000e8c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebc:	f7ff f9da 	bl	8000274 <HAL_GetTick>
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	1ac0      	subs	r0, r0, r3
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_RCC_ClockConfig+0x124>)
 8000ec6:	4298      	cmp	r0, r3
 8000ec8:	d8e0      	bhi.n	8000e8c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	686b      	ldr	r3, [r5, #4]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d1f3      	bne.n	8000ebc <HAL_RCC_ClockConfig+0xdc>
 8000ed4:	e792      	b.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	439a      	bics	r2, r3
 8000eda:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000edc:	6822      	ldr	r2, [r4, #0]
 8000ede:	421a      	tst	r2, r3
 8000ee0:	d1ac      	bne.n	8000e3c <HAL_RCC_ClockConfig+0x5c>
 8000ee2:	e790      	b.n	8000e06 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee4:	6863      	ldr	r3, [r4, #4]
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_RCC_ClockConfig+0x128>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	68f2      	ldr	r2, [r6, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	6063      	str	r3, [r4, #4]
 8000ef0:	e78d      	b.n	8000e0e <HAL_RCC_ClockConfig+0x2e>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40022000 	.word	0x40022000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	080012f0 	.word	0x080012f0
 8000f00:	20000000 	.word	0x20000000
 8000f04:	00001388 	.word	0x00001388
 8000f08:	fffff8ff 	.word	0xfffff8ff

08000f0c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000f0c:	4b01      	ldr	r3, [pc, #4]	; (8000f14 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
}
 8000f10:	4770      	bx	lr
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000000 	.word	0x20000000

08000f18 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f18:	2312      	movs	r3, #18
{
 8000f1a:	b510      	push	{r4, lr}
 8000f1c:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f1e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	3b11      	subs	r3, #17
 8000f22:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f24:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f26:	330f      	adds	r3, #15
 8000f28:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f2a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f2c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f30:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f7ff fd41 	bl	80009b8 <HAL_RCC_OscConfig>
 8000f36:	1e01      	subs	r1, r0, #0
 8000f38:	d000      	beq.n	8000f3c <SystemClock_Config+0x24>
 8000f3a:	e7fe      	b.n	8000f3a <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f3e:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f40:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f42:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f44:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f48:	f7ff ff4a 	bl	8000de0 <HAL_RCC_ClockConfig>
 8000f4c:	1e04      	subs	r4, r0, #0
 8000f4e:	d000      	beq.n	8000f52 <SystemClock_Config+0x3a>
 8000f50:	e7fe      	b.n	8000f50 <SystemClock_Config+0x38>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f52:	f7ff ffdb 	bl	8000f0c <HAL_RCC_GetHCLKFreq>
 8000f56:	21fa      	movs	r1, #250	; 0xfa
 8000f58:	0089      	lsls	r1, r1, #2
 8000f5a:	f7ff f8d5 	bl	8000108 <__udivsi3>
 8000f5e:	f7ff fc47 	bl	80007f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f7ff fc5e 	bl	8000824 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	0022      	movs	r2, r4
 8000f6c:	0021      	movs	r1, r4
 8000f6e:	4240      	negs	r0, r0
 8000f70:	f7ff fc0e 	bl	8000790 <HAL_NVIC_SetPriority>
}
 8000f74:	b010      	add	sp, #64	; 0x40
 8000f76:	bd10      	pop	{r4, pc}

08000f78 <main>:
{
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	b088      	sub	sp, #32
  HAL_Init();
 8000f7c:	f7ff f962 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8000f80:	f7ff ffca 	bl	8000f18 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	2080      	movs	r0, #128	; 0x80
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <main+0x17c>)
 8000f88:	0280      	lsls	r0, r0, #10
 8000f8a:	6959      	ldr	r1, [r3, #20]
  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000f9a:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000fa2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000faa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	400b      	ands	r3, r1
 8000fae:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000fb0:	21fe      	movs	r1, #254	; 0xfe
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000fb4:	f7ff fcfa 	bl	80009ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2102      	movs	r1, #2
 8000fbc:	484e      	ldr	r0, [pc, #312]	; (80010f8 <main+0x180>)
 8000fbe:	f7ff fcf5 	bl	80009ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	a903      	add	r1, sp, #12
 8000fca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000fcc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f7ff fc3a 	bl	800084c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fd8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	4847      	ldr	r0, [pc, #284]	; (80010f8 <main+0x180>)
 8000fdc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fde:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f7ff fc31 	bl	800084c <HAL_GPIO_Init>
  hadc.Instance = ADC1;
 8000fea:	4c44      	ldr	r4, [pc, #272]	; (80010fc <main+0x184>)
 8000fec:	4b44      	ldr	r3, [pc, #272]	; (8001100 <main+0x188>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fee:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8000ff0:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff6:	23c2      	movs	r3, #194	; 0xc2
 8000ff8:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ffa:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001000:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001002:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001004:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001006:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001008:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800100e:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001010:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001012:	f7ff f9f5 	bl	8000400 <HAL_ADC_Init>
 8001016:	42a8      	cmp	r0, r5
 8001018:	d000      	beq.n	800101c <main+0xa4>
 800101a:	e7fe      	b.n	800101a <main+0xa2>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001022:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8001024:	9003      	str	r0, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001026:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001028:	a903      	add	r1, sp, #12
 800102a:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800102c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800102e:	f7ff fb39 	bl	80006a4 <HAL_ADC_ConfigChannel>
 8001032:	2800      	cmp	r0, #0
 8001034:	d000      	beq.n	8001038 <main+0xc0>
 8001036:	e7fe      	b.n	8001036 <main+0xbe>
	  HAL_ADC_PollForConversion(&hadc,HAL_MAX_DELAY);
 8001038:	2601      	movs	r6, #1
 800103a:	4276      	negs	r6, r6
	  HAL_ADC_Start(&hadc);
 800103c:	0020      	movs	r0, r4
 800103e:	f7ff fa85 	bl	800054c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc,HAL_MAX_DELAY);
 8001042:	0031      	movs	r1, r6
 8001044:	0020      	movs	r0, r4
 8001046:	f7ff facb 	bl	80005e0 <HAL_ADC_PollForConversion>
	  uint16_t val = HAL_ADC_GetValue(&hadc);
 800104a:	0020      	movs	r0, r4
 800104c:	f7ff fb26 	bl	800069c <HAL_ADC_GetValue>
	  if( (val & 0x0004) != 0 ){
 8001050:	2204      	movs	r2, #4
 8001052:	b285      	uxth	r5, r0
 8001054:	402a      	ands	r2, r5
 8001056:	d000      	beq.n	800105a <main+0xe2>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800105a:	2102      	movs	r1, #2
 800105c:	4826      	ldr	r0, [pc, #152]	; (80010f8 <main+0x180>)
 800105e:	f7ff fca5 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0008) != 0 ){
 8001062:	2208      	movs	r2, #8
 8001064:	402a      	ands	r2, r5
 8001066:	d000      	beq.n	800106a <main+0xf2>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 800106a:	2090      	movs	r0, #144	; 0x90
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	05c0      	lsls	r0, r0, #23
 8001070:	f7ff fc9c 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0010) != 0 ){
 8001074:	2210      	movs	r2, #16
 8001076:	402a      	ands	r2, r5
 8001078:	d000      	beq.n	800107c <main+0x104>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800107c:	2090      	movs	r0, #144	; 0x90
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	05c0      	lsls	r0, r0, #23
 8001082:	f7ff fc93 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0020) != 0 ){
 8001086:	2120      	movs	r1, #32
 8001088:	002a      	movs	r2, r5
 800108a:	400a      	ands	r2, r1
 800108c:	d000      	beq.n	8001090 <main+0x118>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8001090:	2090      	movs	r0, #144	; 0x90
 8001092:	05c0      	lsls	r0, r0, #23
 8001094:	f7ff fc8a 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0040) != 0 ){
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	402a      	ands	r2, r5
 800109c:	d000      	beq.n	80010a0 <main+0x128>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80010a0:	2090      	movs	r0, #144	; 0x90
 80010a2:	2102      	movs	r1, #2
 80010a4:	05c0      	lsls	r0, r0, #23
 80010a6:	f7ff fc81 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0080) != 0 ){
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	402a      	ands	r2, r5
 80010ae:	d000      	beq.n	80010b2 <main+0x13a>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 80010b2:	2090      	movs	r0, #144	; 0x90
 80010b4:	2104      	movs	r1, #4
 80010b6:	05c0      	lsls	r0, r0, #23
 80010b8:	f7ff fc78 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0100) != 0 ){
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	0052      	lsls	r2, r2, #1
 80010c0:	402a      	ands	r2, r5
 80010c2:	d000      	beq.n	80010c6 <main+0x14e>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 80010c6:	2090      	movs	r0, #144	; 0x90
 80010c8:	2108      	movs	r1, #8
 80010ca:	05c0      	lsls	r0, r0, #23
 80010cc:	f7ff fc6e 	bl	80009ac <HAL_GPIO_WritePin>
	  if( (val & 0x0200) != 0 ){
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	402a      	ands	r2, r5
 80010d6:	d000      	beq.n	80010da <main+0x162>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80010da:	2090      	movs	r0, #144	; 0x90
 80010dc:	2110      	movs	r1, #16
 80010de:	05c0      	lsls	r0, r0, #23
 80010e0:	f7ff fc64 	bl	80009ac <HAL_GPIO_WritePin>
	  HAL_ADC_Stop(&hadc);
 80010e4:	0020      	movs	r0, r4
 80010e6:	f7ff fa5d 	bl	80005a4 <HAL_ADC_Stop>
	  HAL_Delay(100);
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f7ff f8c8 	bl	8000280 <HAL_Delay>
  {
 80010f0:	e7a4      	b.n	800103c <main+0xc4>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	20000024 	.word	0x20000024
 8001100:	40012400 	.word	0x40012400

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2001      	movs	r0, #1
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_MspInit+0x4c>)
 800110a:	6999      	ldr	r1, [r3, #24]
 800110c:	4301      	orrs	r1, r0
 800110e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4002      	ands	r2, r0
 8001118:	9200      	str	r2, [sp, #0]
 800111a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800111e:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	430a      	orrs	r2, r1
 8001122:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	400b      	ands	r3, r1
 800112a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800112c:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001130:	f7ff fb2e 	bl	8000790 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2002      	movs	r0, #2
 8001138:	0011      	movs	r1, r2
 800113a:	4240      	negs	r0, r0
 800113c:	f7ff fb28 	bl	8000790 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2001      	movs	r0, #1
 8001144:	0011      	movs	r1, r2
 8001146:	4240      	negs	r0, r0
 8001148:	f7ff fb22 	bl	8000790 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bd07      	pop	{r0, r1, r2, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_ADC_MspInit+0x38>)
 8001158:	6802      	ldr	r2, [r0, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d114      	bne.n	8001188 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_ADC_MspInit+0x3c>)
 8001162:	0080      	lsls	r0, r0, #2
 8001164:	6991      	ldr	r1, [r2, #24]
 8001166:	4301      	orrs	r1, r0
 8001168:	6191      	str	r1, [r2, #24]
 800116a:	6993      	ldr	r3, [r2, #24]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116e:	4003      	ands	r3, r0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001174:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001178:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	3302      	adds	r3, #2
 800117c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f7ff fb62 	bl	800084c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001188:	b007      	add	sp, #28
 800118a:	bd00      	pop	{pc}
 800118c:	40012400 	.word	0x40012400
 8001190:	40021000 	.word	0x40021000

08001194 <NMI_Handler>:
 8001194:	4770      	bx	lr

08001196 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler>

08001198 <SVC_Handler>:
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800119c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f7ff f861 	bl	8000264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80011a2:	f7ff fb4e 	bl	8000842 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a6:	bd10      	pop	{r4, pc}

080011a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80011a8:	2101      	movs	r1, #1
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80011ac:	4811      	ldr	r0, [pc, #68]	; (80011f4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4002      	ands	r2, r0
 80011b8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <SystemInit+0x50>)
 80011be:	4002      	ands	r2, r0
 80011c0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <SystemInit+0x54>)
 80011c6:	4002      	ands	r2, r0
 80011c8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <SystemInit+0x58>)
 80011ce:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80011d0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80011d2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80011d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d6:	4382      	bics	r2, r0
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80011da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <SystemInit+0x5c>)
 80011de:	4002      	ands	r2, r0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	438a      	bics	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]

}
 80011ec:	4770      	bx	lr
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	40021000 	.word	0x40021000
 80011f4:	08ffb80c 	.word	0x08ffb80c
 80011f8:	fef6ffff 	.word	0xfef6ffff
 80011fc:	fffbffff 	.word	0xfffbffff
 8001200:	ffc0ffff 	.word	0xffc0ffff
 8001204:	fffffeec 	.word	0xfffffeec

08001208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 800120e:	490e      	ldr	r1, [pc, #56]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001224:	4c0b      	ldr	r4, [pc, #44]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001232:	f7ff ffb9 	bl	80011a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001236:	f000 f811 	bl	800125c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123a:	f7ff fe9d 	bl	8000f78 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   r0, =_estack
 8001240:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800124c:	08001308 	.word	0x08001308
  ldr r2, =_sbss
 8001250:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001254:	20000070 	.word	0x20000070

08001258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_IRQHandler>
	...

0800125c <__libc_init_array>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	2600      	movs	r6, #0
 8001260:	4d0c      	ldr	r5, [pc, #48]	; (8001294 <__libc_init_array+0x38>)
 8001262:	4c0d      	ldr	r4, [pc, #52]	; (8001298 <__libc_init_array+0x3c>)
 8001264:	1b64      	subs	r4, r4, r5
 8001266:	10a4      	asrs	r4, r4, #2
 8001268:	42a6      	cmp	r6, r4
 800126a:	d109      	bne.n	8001280 <__libc_init_array+0x24>
 800126c:	2600      	movs	r6, #0
 800126e:	f000 f823 	bl	80012b8 <_init>
 8001272:	4d0a      	ldr	r5, [pc, #40]	; (800129c <__libc_init_array+0x40>)
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <__libc_init_array+0x44>)
 8001276:	1b64      	subs	r4, r4, r5
 8001278:	10a4      	asrs	r4, r4, #2
 800127a:	42a6      	cmp	r6, r4
 800127c:	d105      	bne.n	800128a <__libc_init_array+0x2e>
 800127e:	bd70      	pop	{r4, r5, r6, pc}
 8001280:	00b3      	lsls	r3, r6, #2
 8001282:	58eb      	ldr	r3, [r5, r3]
 8001284:	4798      	blx	r3
 8001286:	3601      	adds	r6, #1
 8001288:	e7ee      	b.n	8001268 <__libc_init_array+0xc>
 800128a:	00b3      	lsls	r3, r6, #2
 800128c:	58eb      	ldr	r3, [r5, r3]
 800128e:	4798      	blx	r3
 8001290:	3601      	adds	r6, #1
 8001292:	e7f2      	b.n	800127a <__libc_init_array+0x1e>
 8001294:	08001300 	.word	0x08001300
 8001298:	08001300 	.word	0x08001300
 800129c:	08001300 	.word	0x08001300
 80012a0:	08001304 	.word	0x08001304

080012a4 <memcpy>:
 80012a4:	2300      	movs	r3, #0
 80012a6:	b510      	push	{r4, lr}
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d100      	bne.n	80012ae <memcpy+0xa>
 80012ac:	bd10      	pop	{r4, pc}
 80012ae:	5ccc      	ldrb	r4, [r1, r3]
 80012b0:	54c4      	strb	r4, [r0, r3]
 80012b2:	3301      	adds	r3, #1
 80012b4:	e7f8      	b.n	80012a8 <memcpy+0x4>
	...

080012b8 <_init>:
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012be:	bc08      	pop	{r3}
 80012c0:	469e      	mov	lr, r3
 80012c2:	4770      	bx	lr

080012c4 <_fini>:
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ca:	bc08      	pop	{r3}
 80012cc:	469e      	mov	lr, r3
 80012ce:	4770      	bx	lr
